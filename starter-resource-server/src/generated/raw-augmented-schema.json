{
  "config": {},
  "entities": {
    "user": {
      "name": "user",
      "fields": {
        "username": {
          "name": "username",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "required": true,
            "unique": true,
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    username: string;",
            "populatedType": "    username: string;",
            "create": "    username: string;",
            "update": "    username?: string;",
            "iterable": "",
            "canRead": "\nexport const userUsernameCanRead = () => true;\n",
            "canCreate": "\nexport const userUsernameCanCreate = () => true;\n",
            "canUpdate": "\nexport const userUsernameCanUpdate = () => true;\n"
          }
        },
        "password": {
          "name": "password",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "required": true,
            "select": false,
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    password: string;",
            "populatedType": "    password: string;",
            "create": "    password: string;",
            "update": "    password?: string;",
            "iterable": "",
            "canRead": "\nexport const userPasswordCanRead = () => true;\n",
            "canCreate": "\nexport const userPasswordCanCreate = () => true;\n",
            "canUpdate": "\nexport const userPasswordCanUpdate = () => true;\n"
          }
        },
        "email": {
          "name": "email",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "required": true,
            "unique": true,
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    email: string;",
            "populatedType": "    email: string;",
            "create": "    email: string;",
            "update": "    email?: string;",
            "iterable": "",
            "canRead": "\nexport const userEmailCanRead = () => true;\n",
            "canCreate": "\nexport const userEmailCanCreate = () => true;\n",
            "canUpdate": "\nexport const userEmailCanUpdate = () => true;\n"
          }
        },
        "roles": {
          "name": "roles",
          "parent": "user",
          "default": [
            "user"
          ],
          "attributes": {
            "required": true,
            "isArray": true,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    roles: string[];",
            "populatedType": "    roles: string[];",
            "create": "    roles: string[];",
            "update": "    roles?: string[];",
            "iterable": "    roles?: string[];",
            "canRead": "\nexport const userRolesCanRead = () => true;\n",
            "canCreate": "\nexport const userRolesCanCreate = () => false;\n",
            "canUpdate": "\nexport const userRolesCanUpdate = ({ user }) => user && isAdmin(user.roles);\n"
          }
        },
        "firstName": {
          "name": "firstName",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "required": true,
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    firstName: string;",
            "populatedType": "    firstName: string;",
            "create": "    firstName: string;",
            "update": "    firstName?: string;",
            "iterable": "",
            "canRead": "\nexport const userFirstNameCanRead = () => true;\n",
            "canCreate": "\nexport const userFirstNameCanCreate = () => true;\n",
            "canUpdate": "\nexport const userFirstNameCanUpdate = () => true;\n"
          }
        },
        "lastName": {
          "name": "lastName",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "required": true,
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    lastName: string;",
            "populatedType": "    lastName: string;",
            "create": "    lastName: string;",
            "update": "    lastName?: string;",
            "iterable": "",
            "canRead": "\nexport const userLastNameCanRead = () => true;\n",
            "canCreate": "\nexport const userLastNameCanCreate = () => true;\n",
            "canUpdate": "\nexport const userLastNameCanUpdate = () => true;\n"
          }
        },
        "birthdate": {
          "name": "birthdate",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    birthdate?: Date;",
            "populatedType": "    birthdate?: Date;",
            "create": "    birthdate?: Date;",
            "update": "    birthdate?: Date;",
            "iterable": "",
            "canRead": "\nexport const userBirthdateCanRead = () => true;\n",
            "canCreate": "\nexport const userBirthdateCanCreate = () => true;\n",
            "canUpdate": "\nexport const userBirthdateCanUpdate = () => true;\n"
          }
        },
        "json": {
          "name": "json",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    json?: any;",
            "populatedType": "    json?: any;",
            "create": "    json?: any;",
            "update": "    json?: any;",
            "iterable": "",
            "canRead": "\nexport const userJsonCanRead = () => true;\n",
            "canCreate": "\nexport const userJsonCanCreate = () => true;\n",
            "canUpdate": "\nexport const userJsonCanUpdate = () => true;\n"
          }
        },
        "todos": {
          "name": "todos",
          "parent": "user",
          "type": "Todo",
          "autoReverse": false,
          "attributes": {
            "isArray": true,
            "isRelated": true,
            "can": {}
          },
          "TS": {
            "type": "    todos?: ID[];",
            "populatedType": "    todos?: Todo[];",
            "create": "    todos?: ID[];",
            "update": "    todos?: ID[];",
            "iterable": "    todos?: ID[];",
            "canRead": "\nexport const userTodosCanRead = () => true;\n",
            "canCreate": "\nexport const userTodosCanCreate = () => false;\n",
            "canUpdate": "\nexport const userTodosCanUpdate = () => false;\n"
          }
        },
        "fullName": {
          "name": "fullName",
          "parent": "user",
          "returnType": "Object",
          "attributes": {
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    fullName?: Object;",
            "populatedType": "    fullName?: Object;",
            "create": "",
            "update": "",
            "iterable": "",
            "canRead": "\nexport const userFullNameCanRead = () => true;\n",
            "canCreate": "",
            "canUpdate": ""
          }
        }
      },
      "services": {
        "readAll": {
          "name": "readAll",
          "verb": "GET",
          "endpoint": "/",
          "swaggerParameters": "[]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "readOne": {
          "name": "readOne",
          "verb": "GET",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "create": {
          "name": "create",
          "verb": "POST",
          "endpoint": "/",
          "swaggerParameters": "[{\"name\": \"body\", \"in\": \"body\", \"description\": \"Body\", \"schema\": {\"$ref\": \"#/definitions/CreatePayload\"}}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "update": {
          "name": "update",
          "verb": "PUT",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}, {\"name\": \"body\", \"in\": \"body\", \"description\": \"Body\", \"schema\": {\"$ref\": \"#/definitions/UpdatePayload\"}}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "delete": {
          "name": "delete",
          "verb": "DELETE",
          "endpoint": "/:id",
          "exclude": false,
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}]",
          "swaggerResponses": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "grapgqlParameters": "",
          "grapgqlResponse": "",
          "middlewares": []
        }
      },
      "TS": {
        "type": "\n\nexport interface User {\n\n    username: string;\n\n    password: string;\n\n    email: string;\n\n    roles: string[];\n\n    firstName: string;\n\n    lastName: string;\n\n    birthdate?: Date;\n\n    json?: any;\n\n    todos?: ID[];\n\n    fullName?: Object;\n\n}\n\n",
        "populatedType": "\n\nexport interface UserPopulated {\n\n    username: string;\n\n    password: string;\n\n    email: string;\n\n    roles: string[];\n\n    firstName: string;\n\n    lastName: string;\n\n    birthdate?: Date;\n\n    json?: any;\n\n    todos?: Todo[];\n\n    fullName?: Object;\n\n}\n\n",
        "create": "\n\nexport interface UserCreatePayload {\n\n    id?: ID;\n\n    username: string;\n\n    password: string;\n\n    email: string;\n\n    roles: string[];\n\n    firstName: string;\n\n    lastName: string;\n\n    birthdate?: Date;\n\n    json?: any;\n\n    todos?: ID[];\n\n}\n\n",
        "update": "\n\nexport interface UserUpdatePayload {\n\n    id: ID;\n\n    push?: UserIterablePayload;\n\n    pull?: UserIterablePayload;\n\n    username?: string;\n\n    password?: string;\n\n    email?: string;\n\n    roles?: string[];\n\n    firstName?: string;\n\n    lastName?: string;\n\n    birthdate?: Date;\n\n    json?: any;\n\n    todos?: ID[];\n\n}\n\n",
        "iterable": "\n\nexport interface UserIterablePayload {\n\n    roles?: string[];\n\n    todos?: ID[];\n\n}\n\n",
        "canRead": "\n\nexport const UserCanReads {\n\n    userUsernameCanRead = () => true,\n\n    userPasswordCanRead = () => true,\n\n    userEmailCanRead = () => true,\n\n    userRolesCanRead = () => true,\n\n    userFirstNameCanRead = () => true,\n\n    userLastNameCanRead = () => true,\n\n    userBirthdateCanRead = () => true,\n\n    userJsonCanRead = () => true,\n\n    userTodosCanRead = () => true,\n\n    userFullNameCanRead = () => true,\n\n}\n\n",
        "canCreate": "\n\nexport const UserCanCreates {\n\n    userUsernameCanCreate = () => true,\n\n    userPasswordCanCreate = () => true,\n\n    userEmailCanCreate = () => true,\n\n    userRolesCanCreate = () => false,\n\n    userFirstNameCanCreate = () => true,\n\n    userLastNameCanCreate = () => true,\n\n    userBirthdateCanCreate = () => true,\n\n    userJsonCanCreate = () => true,\n\n    userTodosCanCreate = () => false,\n\n}\n\n",
        "canUpdate": "\n\nexport const UserCanUpdates {\n\n    userUsernameCanUpdate = () => true,\n\n    userPasswordCanUpdate = () => true,\n\n    userEmailCanUpdate = () => true,\n\n    userRolesCanUpdate = ({ user }) => user && isAdmin(user.roles),\n\n    userFirstNameCanUpdate = () => true,\n\n    userLastNameCanUpdate = () => true,\n\n    userBirthdateCanUpdate = () => true,\n\n    userJsonCanUpdate = () => true,\n\n    userTodosCanUpdate = () => false,\n\n}\n\n",
        "common": "",
        "cans": "",
        "middlewares": "",
        "controllers": ""
      }
    },
    "todo": {
      "name": "todo",
      "fields": {
        "title": {
          "name": "title",
          "parent": "todo",
          "returnType": "Object",
          "attributes": {
            "required": true,
            "unique": true,
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    title: string;",
            "populatedType": "    title: string;",
            "create": "    title: string;",
            "update": "    title?: string;",
            "iterable": "",
            "canRead": "\nexport const todoTitleCanRead = () => true;\n",
            "canCreate": "\nexport const todoTitleCanCreate = () => true;\n",
            "canUpdate": "\nexport const todoTitleCanUpdate = () => true;\n"
          }
        },
        "tags": {
          "name": "tags",
          "parent": "todo",
          "type": "Tag",
          "autoReverse": true,
          "attributes": {
            "isArray": true,
            "isRelated": true,
            "can": {}
          },
          "TS": {
            "type": "    tags?: ID[];",
            "populatedType": "    tags?: Tag[];",
            "create": "    tags?: ID[];",
            "update": "    tags?: ID[];",
            "iterable": "    tags?: ID[];",
            "canRead": "\nexport const todoTagsCanRead = () => true;\n",
            "canCreate": "\nexport const todoTagsCanCreate = () => true;\n",
            "canUpdate": "\nexport const todoTagsCanUpdate = () => true;\n"
          }
        },
        "owner": {
          "name": "owner",
          "parent": "todo",
          "type": "User",
          "autoReverse": true,
          "attributes": {
            "required": true,
            "isArray": false,
            "isRelated": true,
            "can": {}
          },
          "TS": {
            "type": "    owner: ID;",
            "populatedType": "    owner: User;",
            "create": "    owner: ID;",
            "update": "    owner?: ID;",
            "iterable": "",
            "canRead": "\nexport const todoOwnerCanRead = () => true;\n",
            "canCreate": "\nexport const todoOwnerCanCreate = () => false;\n",
            "canUpdate": "\nexport const todoOwnerCanUpdate = () => false;\n"
          }
        }
      },
      "services": {
        "readAll": {
          "name": "readAll",
          "verb": "GET",
          "endpoint": "/",
          "swaggerParameters": "[]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "readOne": {
          "name": "readOne",
          "verb": "GET",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "create": {
          "name": "create",
          "verb": "POST",
          "endpoint": "/",
          "swaggerParameters": "[{\"name\": \"body\", \"in\": \"body\", \"description\": \"Body\", \"schema\": {\"$ref\": \"#/definitions/CreatePayload\"}}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "update": {
          "name": "update",
          "verb": "PUT",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}, {\"name\": \"body\", \"in\": \"body\", \"description\": \"Body\", \"schema\": {\"$ref\": \"#/definitions/UpdatePayload\"}}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "delete": {
          "name": "delete",
          "verb": "DELETE",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        }
      },
      "TS": {
        "type": "\n\nexport interface Todo {\n\n    title: string;\n\n    tags?: ID[];\n\n    owner: ID;\n\n}\n\n",
        "populatedType": "\n\nexport interface TodoPopulated {\n\n    title: string;\n\n    tags?: Tag[];\n\n    owner: User;\n\n}\n\n",
        "create": "\n\nexport interface TodoCreatePayload {\n\n    id?: ID;\n\n    title: string;\n\n    tags?: ID[];\n\n    owner: ID;\n\n}\n\n",
        "update": "\n\nexport interface TodoUpdatePayload {\n\n    id: ID;\n\n    push?: TodoIterablePayload;\n\n    pull?: TodoIterablePayload;\n\n    title?: string;\n\n    tags?: ID[];\n\n    owner?: ID;\n\n}\n\n",
        "iterable": "\n\nexport interface TodoIterablePayload {\n\n    tags?: ID[];\n\n}\n\n",
        "canRead": "\n\nexport const TodoCanReads {\n\n    todoTitleCanRead = () => true,\n\n    todoTagsCanRead = () => true,\n\n    todoOwnerCanRead = () => true,\n\n}\n\n",
        "canCreate": "\n\nexport const TodoCanCreates {\n\n    todoTitleCanCreate = () => true,\n\n    todoTagsCanCreate = () => true,\n\n    todoOwnerCanCreate = () => false,\n\n}\n\n",
        "canUpdate": "\n\nexport const TodoCanUpdates {\n\n    todoTitleCanUpdate = () => true,\n\n    todoTagsCanUpdate = () => true,\n\n    todoOwnerCanUpdate = () => false,\n\n}\n\n",
        "common": "",
        "cans": "",
        "middlewares": "",
        "controllers": ""
      }
    },
    "tag": {
      "name": "tag",
      "fields": {
        "name": {
          "name": "name",
          "parent": "tag",
          "returnType": "Object",
          "attributes": {
            "required": true,
            "unique": true,
            "isArray": false,
            "isRelated": false,
            "can": {}
          },
          "TS": {
            "type": "    name: string;",
            "populatedType": "    name: string;",
            "create": "    name: string;",
            "update": "    name?: string;",
            "iterable": "",
            "canRead": "\nexport const tagNameCanRead = () => true;\n",
            "canCreate": "\nexport const tagNameCanCreate = () => true;\n",
            "canUpdate": "\nexport const tagNameCanUpdate = () => true;\n"
          }
        },
        "todos": {
          "name": "todos",
          "parent": "tag",
          "type": "Todo",
          "autoReverse": true,
          "attributes": {
            "isArray": true,
            "isRelated": true,
            "can": {}
          },
          "TS": {
            "type": "    todos?: ID[];",
            "populatedType": "    todos?: Todo[];",
            "create": "    todos?: ID[];",
            "update": "    todos?: ID[];",
            "iterable": "    todos?: ID[];",
            "canRead": "\nexport const tagTodosCanRead = () => true;\n",
            "canCreate": "\nexport const tagTodosCanCreate = () => true;\n",
            "canUpdate": "\nexport const tagTodosCanUpdate = () => true;\n"
          }
        }
      },
      "services": {
        "readAll": {
          "name": "readAll",
          "verb": "GET",
          "endpoint": "/",
          "swaggerParameters": "[]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "readOne": {
          "name": "readOne",
          "verb": "GET",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "create": {
          "name": "create",
          "verb": "POST",
          "endpoint": "/",
          "swaggerParameters": "[{\"name\": \"body\", \"in\": \"body\", \"description\": \"Body\", \"schema\": {\"$ref\": \"#/definitions/CreatePayload\"}}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "update": {
          "name": "update",
          "verb": "PUT",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}, {\"name\": \"body\", \"in\": \"body\", \"description\": \"Body\", \"schema\": {\"$ref\": \"#/definitions/UpdatePayload\"}}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        },
        "delete": {
          "name": "delete",
          "verb": "DELETE",
          "endpoint": "/:id",
          "swaggerParameters": "[{\"name\": \"id\", \"in\": \"path\", \"required\": true, \"description\": \"The 'id' of entity\", \"type\": \"string\"}]",
          "swaggerRespones": "{\"200\": {\"description\": \"Success result\", \"schema\": {\"$ref\": \"#/definitions/\"}}, \"400\": {\"description\": \"Failure error\", \"schema\": {\"$ref\": \"#/definitions/Error\"}}}",
          "graphqlParameters": "",
          "graphqlResponse": "",
          "middlewares": [],
          "exclude": false
        }
      },
      "TS": {
        "type": "\n\nexport interface Tag {\n\n    name: string;\n\n    todos?: ID[];\n\n}\n\n",
        "populatedType": "\n\nexport interface TagPopulated {\n\n    name: string;\n\n    todos?: Todo[];\n\n}\n\n",
        "create": "\n\nexport interface TagCreatePayload {\n\n    id?: ID;\n\n    name: string;\n\n    todos?: ID[];\n\n}\n\n",
        "update": "\n\nexport interface TagUpdatePayload {\n\n    id: ID;\n\n    push?: TagIterablePayload;\n\n    pull?: TagIterablePayload;\n\n    name?: string;\n\n    todos?: ID[];\n\n}\n\n",
        "iterable": "\n\nexport interface TagIterablePayload {\n\n    todos?: ID[];\n\n}\n\n",
        "canRead": "\n\nexport const TagCanReads {\n\n    tagNameCanRead = () => true,\n\n    tagTodosCanRead = () => true,\n\n}\n\n",
        "canCreate": "\n\nexport const TagCanCreates {\n\n    tagNameCanCreate = () => true,\n\n    tagTodosCanCreate = () => true,\n\n}\n\n",
        "canUpdate": "\n\nexport const TagCanUpdates {\n\n    tagNameCanUpdate = () => true,\n\n    tagTodosCanUpdate = () => true,\n\n}\n\n",
        "common": "",
        "cans": "",
        "middlewares": "",
        "controllers": ""
      }
    }
  }
}